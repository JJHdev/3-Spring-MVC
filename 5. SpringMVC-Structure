1. 스프링 MVC 전체 구조
  1-1
    -> 기존에 만들던 (4번)과 스프링 MVC구조와 크게 다를게 없다. FrontController를 DispatcherServlet이라는 이름으로만 바꾸면 거의 같다.
    -> DispatcherServlet이것도 결국 서블릿이다. -->> FrameworkServlet -->> HttpServletBean -->> HttpServlet 으로 상속 (결국 서블릿으로 작동한다.)
    -> DispatcherServlet는 urlpattern="/" 형식으로 모든 경로에 대하여 매핑한다. 
    -> 스프링 부트에서는 내장톰캣을 띄우면서 Was에 있는 서블릿컨테이너에서 서블릿을 형성하는데 DispatcherServlet를 자동으로 띄운다.
  1-2
    -> 요청 흐름
      ->> 서블릿이 호출되면 HttpServlet이 제공하는 service() 호출된다.
      ->> 스프링 MVC는 DispatcherServlet의 부모인 FrameworkServlet에서 service()를 오버라이드 해주었다.
      ->> FrameworkServlet.service()를 시작으로 여러 메서드가 호출되면서, DispatcherServlet.doDispatch()가 호출된다.
  1-3
    -> doDispatch 알고리즘
      ->> 1. 핸들러 조회
      ->> 2. 핸들러 어댑터 조회 - 핸들러를 처리할 수 있는 어댑터
      ->> 3. 핸들러 어댑터 실행 ->> 4. 핸들러 어댑터를 통해 핸들러 실행 ->> 5. ModelAndView 변환
      ->> 6. processDispatchResult 가 실행 (여기에서 Render 가 실행되는것 임)
      ->> 7. 뷰리졸버를 통해 뷰 찾기. (View 반환)
      ->> 8. view와 request, response 를 렌더링.
  1-4
    -> "동작순서"
      ->> 1. 핸들러 조회 : 핸들러 매핑을 통해 URL에 매핑된 핸들러(컨트롤러)를 조회한다.
      ->> 2. 핸들러 어댑터 조회 : 핸들러를 실행할 수 있는 핸들러 어댑터를 조회한다.
      ->> 3. 핸들러 어댑터 실행 : 핸들러 어댑터를 실행한다.
      ->> 4. 핸들러 실행 : 핸들러 어댑터가 실제 핸들러를 실행한다.
      ->> 5. ModelAndView 반환 : 핸들러 어댑터는 핸들러가 반환하는 정보를 ModelAndView로 변환 해서 반환한다.
      ->> 6. viewResolver 호출 : 뷰리졸버를 찾고 실행한다.
        --- JSP의 경우 : InternalResourceViewResolver가 자동 등록되고 사용된다.
      ->> 7. View 반환 : 뷰리졸버는 뷰의 논리 이름을 물리 이름으로 바꾸고, 렌더링 역할을 담당하는 뷰 객체를 반환한다.
        --- JSP의 경우 : InternalResourceView(JstView)를 반환하는데, 내부에 forward() 로직이 있다.
      ->> 8.뷰 렌더링 : 뷰를 통해서 뷰를 렌더링 한다.

2. 핸들러 매핑과 핸들러 어댑터
  2-1
    -> 스프링에서는 예전에 @Controller 를 사용하기전에 interface로 Controller를 사용했었다.
    -> 핸들러 매핑(HandleMapping)
      ->> 핸들러 매핑에서 이 컨트롤러를 찾을 수 있어야 한다.
      ->> 예) 스프링 빈의 이름으로 핸들러를 찾을 수 있는 핸들러 매핑이 필요하다. (springmvc/old-controller)
    -> 핸들러 어댑터(HandleAdapter)
      ->> 핸들러 매핑을 통해서 찾은 핸들러를 실행할 수 있는 핸들러 어댑터가 필요하다.
      ->> 예) Controller 인터페이스를 실행 할 수 있는 핸들러 어댑터를 찾고 실행해야 한다. 

  2-2
    -> 스프링부트가 자동 등록하는 핸들러 매핑과 핸들러 어댑터
      -->> HandlerMapping
        -> RequestMappingHandlerMapping : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용
        -> BeanNameUrlHandlerMapping : 스프링 빈의 이름으로 헨들러를 찾는다.
      -->> HandlerAdapter
        -> RequestMappingHandlerAdapter : 애노테이션 기반의 컨트롤러인 @ReqeustMapping에서 사용
        -> HttpRequestHandlerAdapter : HttpRequestHandler 처리
        -> SimpleControllerHandlerAdapter : Controller 인터페이스 (애노테이션X, 과거에 사용) 처리

    -> 1. 핸들러 매핑으로 헨들러 조회
      ->> 1. HandlerMapping을 순서대로 실행하여, 헨들러를 찾는다.
      ->> 2. 이 경우 빈 이름으로 헨들러를 찾아야 하기 떄문에 이름 그대로 빈 이름으로 헨들러를 찾아주는 BeanNameUrlHandlerMapping가 실행 성공되어 헨들러인 OldController를 반환
    -> 2. 헨들러 어댑터 조회
      ->> 1. HandlerAdapter의 supports()를 순서대로 호출한다.
      ->> 2. simpleControllerHandlerAdapter가 Controller 인터페이스를 지원하므로 대상이 된다.
    -> 3. 헨들러 어댑터 실행
      ->> 1. 디스패처 서블릿이 조회한 SimpleControllerHandlerAdapter를 실행하면서 헨들러 정보도 함께 넘겨준다.
      ->> 2. SimpleContreollerHandlerAdapter는 헨들러인 OldController를 내부에서 실행하고, 그 결과를 반환한다.

    -> summary
      -> OldController를 사용하면서 호출되는 헨들러 메핑, 어댑터는 다음과 같다.
        -->> 1. HandlerMapping = BeanNameUrlHandlerMapping
        -->> 2. HandlerAdapter = SimpleControllerHandlerAdapter
      -> 매핑방식을 일단 찾고 -->> 어떤 어댑터를 사용할지  찾아서 적용시킨다.

    -> 지금 Spring에서 가장 많이 사용하는 것은 RequestMappingHandlerMapping, RequestMappingHandlerAdapter 이다.
        즉 @RequestMapping 애노테이션을 가장 많이 사용한다.

3. 뷰 리졸버
  3-1
    -> 


4. 스프링 MVC - 시작하기

5. 스프링 MVC - 컨트롤러 통합

6. 스프링 MVC - 실용적인 방식
