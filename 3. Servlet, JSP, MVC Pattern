1. 회원 관리 웹 애프리케이션 요구사항
  1-1
    -> 회원정보 (이름, 나이) / 기능 요구사항(회원저장, 회원 목록 조회)/ 회원 도메인 모델()
    -> private MemberRepository(){} 로 생성자를 막아놔야 싱글톤을 만들수 있다.

2. 서블릿으로 회원 관리 웹애플리케이션 만들기
  2-1 
    -> 기존에 해왔던 것을 구현 한것.

3. JSP로 회원 관리 웹 애플리케이션 만들기
  3-1
    -> JSP 사용 하기위해 라이브러리 (jasper 추가)
    -> 개발위치는 webapp > jsp  아래에다가 만들어야 하낟.
    -> JSP 페이지 안에서 자바 코트들 사용할수 있게 해준것 <% 자바 코드 %>
    -> JSP 페이지 안에서 Request, Response코드는 Was에서 보내줘서 자동적으로 사용이 가능하다.
    -> JSP에서는 비즈니스로직과 view코드가 동시에 있으니, 가독성이 너무 안좋다.
    
4. MVC패턴 - 개요
  4-1
    -> 하나의 서블릿이나 JSP만으로 비즈니스 로직과 뷰 렌더링 까지 모두 처리하게되면 유지보수 및 가독성, 부담이 너무 커져 탄생하게 된게 MVC 패턴이다.
    -> 컨트롤러 (http 요청을 받아서 파리머터를 검증하고, 비즈니스 로직을 실행한다, 그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담는다.
    -> 모델 (뷰에 전달할 데이터를 모델에 전부 담는다. 뷰에 전달하는것)
    -> 뷰 (모델에 담겨있는 데이터를 사용해서 화면을 그리는 부분 HTML을 말한다 생가갛면 편하다.)

    -> 컨트롤러에 비즈니스 로직을 담으면 너무 많은 역할을 담당한다 그래서 서비스라는 계층을 새롭게 만들어서 부담을 줄여주게 된다.
    
5. MVC패턴 - 적용
 5-1
    -> 서블릿을 컨트롤러로 사용하고 JSP를 뷰로 사용
    -> Model은 HttpServletRequest 객체를 사용한다. request는 내부에 데이터 저장소가 있는데 request.setAttribute() , request.getAttribute()를 사용하면 데이터를 보관하고 조회할수 있다.

    -> String viewPath = "WEB-INF/views/new-form.jsp"
       RequestDispatcher dispatcher = request.getRequestDisPatcher(viewPath);
       dispatcher.forward(request, response);
    -> 서블릿에서 view로 이동하는 방법. (spring 사용없이 순수)
  5-2
    -> form에서 /save 하면 localhost:8080/save 가 되고 save로 하면 localhost8080:/기존패스/save 상대경로가 된다.
    -> webapp은 경로의 시작
       그러면 WEB-INF는 무엇일까 외부에서 정적페이지로 안불렀으면 좋겠다. 컨트롤러를 걸쳐서 호출하고 싶을 경우 사용하는 규칙 (WAS에서 정한 규칙 외부에서 호출 못하도록 WEB-INF는 못하도록 막혀있다.)
    -> redirect : 웹브라우저에 응답이 나갔다가, 웹브라우저가 redirect경로로 다시 요청하는것 (2번 요청) 그리하여 URL이 변경되고 클라이언트가 인지 가능한 것
    -> forword : 서버내부에서 일어나는 호출이기 대문에 클라이언트가 전혀 인지 X URL 변경 X

6. MVC패턴 - 한계
    -> 현재 viewPath중복, request, response, 공통처리가 아직 컨트롤러에 많다 그리하여 프론트 컨트롤러패턴을 도입하여 이런 문제를 해결할수 있다. (입구를 하나로)

