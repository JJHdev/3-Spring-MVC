1. 프론트컨트롤러 패턴 소개
  1-1
    -> 프론트 컨트롤러를 추가로 서블릿 하나로 클라이언트의 요청을 받을수 있다. (@WebServlet , HttpServletquest와 같이 사용 안해도 된다.)
    -> 스프링 웹 MVC의 핵심은 DispatcherServlet이며 이것은 프론트컨트롤러 패턴으로 구현되어 있음.

2. 프론트 컨트롤러 도입 - v1
  2-1
    -> v1 은 컨트롤러 앞에 프론트컨트롤러를 하나 만들것이다. 이것은 웹브라우저에서 요청이 오면 어느 컨트롤러로 갈지 정해준다.
    -> 인터페이스를 만들어서 아래 컨트롤러는 구현클래스로 만들어 사용하는 방법
    -> 클래스로 서블릿을 상속받은 (프론트 컨트롤러)클래스를 만들고 urlPatterns = "/fromt-controller/v1/*" 로 하여 컨트롤러를 호출시 일단 호출되게 만들어준다.
    -> 서블릿 상속받은 클래스(프론트 컨트롤러)에서는 각 URL 요청을 키값으로 하고 그에 상응하는 컨트롤러를 값으로 해서 맵으로 만드는 로직을 만든다.
    -> 프른트컨트롤러에 로직은 request.getRequestURI()로 하여 각 요청에 맞는 컨트롤러를 객체로 만들게 한다. 

3. view 분리 - v2
  3-1
    -> 컨트롤러에서 Myview라는것을 만들어서 view단을 렌더링해주는 역할을 할것이다.
    -> 웹브라우저에서 요청이 오면 프론트 컨트롤러에서 해당 컨트롤러를 매핑해준다. 컨트롤러에서 View를 지정하여 프론트 컨트롤러에 보내면 프론트 컨트롤러는 view를 Myview로 보내어 해당 view를 렌더링하여 JSP로 보낸다.

4. Model 추가 - v3
  4-1 
    -> 컨트롤러의 입장에서는 HttpServletRequest 와 HttpServletResponse가 꼭 필요하지 않다. 그리하여 요청 파라미터 정보는 자바의 Map으로 대신 넘기도록 하면 컨트롤러는 서블릿 기술을 몰라도 된다.
        그리하여 Request객체를 Model로 사용하는 대신 별도이ㅢ Model 객체를 만들어서 반환하면 된다.

5. 단순하고 실용적인 컨트롤러 - v4

6. 유연힌 컨트롤러1 - v5

7. 유연한 컨트롤러2 - v5
