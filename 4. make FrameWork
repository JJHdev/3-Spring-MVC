1. 프론트컨트롤러 패턴 소개
  1-1
    -> 프론트 컨트롤러를 추가로 서블릿 하나로 클라이언트의 요청을 받을수 있다. (@WebServlet , HttpServletquest와 같이 사용 안해도 된다.)
    -> 스프링 웹 MVC의 핵심은 DispatcherServlet이며 이것은 프론트컨트롤러 패턴으로 구현되어 있음.

2. 프론트 컨트롤러 도입 - v1
  2-1
    -> v1 은 컨트롤러 앞에 프론트컨트롤러를 하나 만들것이다. 이것은 웹브라우저에서 요청이 오면 어느 컨트롤러로 갈지 정해준다.
    -> 인터페이스를 만들어서 아래 컨트롤러는 구현클래스로 만들어 사용하는 방법
    -> 클래스로 서블릿을 상속받은 (프론트 컨트롤러)클래스를 만들고 urlPatterns = "/fromt-controller/v1/*" 로 하여 컨트롤러를 호출시 일단 호출되게 만들어준다.
    -> 서블릿 상속받은 클래스(프론트 컨트롤러)에서는 각 URL 요청을 키값으로 하고 그에 상응하는 컨트롤러를 값으로 해서 맵으로 만드는 로직을 만든다.
    -> 프른트컨트롤러에 로직은 request.getRequestURI()로 하여 각 요청에 맞는 컨트롤러를 객체로 만들게 한다. 

3. view 분리 - v2
  3-1
    -> 컨트롤러에서 Myview라는것을 만들어서 view단을 렌더링해주는 역할을 할것이다.
    -> 웹브라우저에서 요청이 오면 프론트 컨트롤러에서 해당 컨트롤러를 매핑해준다. 컨트롤러에서 View를 지정하여 프론트 컨트롤러에 보내면 프론트 컨트롤러는 view를 Myview로 보내어 해당 view를 렌더링하여 JSP로 보낸다.

4. Model 추가 - v3
  4-1 
    -> 컨트롤러의 입장에서는 HttpServletRequest 와 HttpServletResponse가 꼭 필요하지 않다. 그리하여 요청 파라미터 정보는 자바의 Map으로 대신 넘기도록 하면 컨트롤러는 서블릿 기술을 몰라도 된다.
        그리하여 Request객체를 Model로 사용하는 대신 별도이ㅢ Model 객체를 만들어서 반환하면 된다.
    
  4-2
    -> frontController에서 먼저 요청을 받아 요청온 URL에 따라 컨트롤러를 매핑해준다. 
    -->> request요청을 반복문을 사용하여 paramMap을 만들어서 모든 파라미터의 키와 값을 Map으로 만든다.
    -->> 요청에 맞는 컨트롤러에 paramMap을 보내어 프로세스를 진행한다.
    -->> 컨트롤러에서 프로세스 진행 후 ModelView를(view논리이름과, Map(보낼파라미터)) 프론트컨트롤러에 보낸다. ModelView에서 받은 물리적 URI 주소를 받아 프론트컨트롤러에서 뷰리졸버를 이용하여 물리적 URI주소를 만든다.
    -->> ModelView를 렌더링하여 reqeust.setAttribute로 모든것을 JSP로 보내어 JSP에서 사용한다. (JSP에서는 request.getAttribute)로 데이터를 조회하기 때문에.

5. 단순하고 실용적인 컨트롤러 - v4
  5-1
    -> 프론트컨트롤러에서 model이라는 Map을 컨트롤러에 보내서 컨트롤러에서는 model를 put으로 해서 저장해놓기만 하고 return을 view 논리적이름만 반환한다.
    -> 컨트롤러에서 model에 put해놨으니 프론트컨트롤러에서 리턴받은 view(String)를 뷰리졸버로 물리적URI주소로 변경하고 model과 뷰를 렌더링한다.

6. 유연힌 컨트롤러1 - v5
  6-1
    -> V1~V4까지 내가 쓰고싶은 컨트롤러를 지정하여 쓰고 싶으면 어떻게 해야할까 이렇게 사용하고싶은 방식으로 사용하는 방법으로 유연하게 만들어 보자.
    -> 어댑터 패턴 (볼트를 바꿔서 다양한 방식으로 기능을 사용가능하도록 만든다.)
    -> 핸들러 어댑터 : 중간에 어댑터 역할을 하는 어댑터가 추가되었는데 이름이 핸들러 어댑터이다. 여기서 어댑터 역할을 해주는 덕분에 다양한 종류의 컨트롤러를 호출할 수 있다.
    -> 핸들러 : 컨트롤러의 이름을 더 넓은 범위인 핸들러로 변경하였다. 그 이유는 이제 어댑터가 있기 때문에 꼭 컨트롤러의 개념 뿐만 아니라 어떠한 것이든 해당하는 종류의 어댑터만 있으면 다 처리할 수 있기 때문이다.

  6-2
    -> 교육자료를 보면서 다시 상기하는게 이해가 빠를것임.
    -> 인터페이스로 만들고 나중에 바꾸고 싶을때 구현체만 바꿔치기 하면 되도록 구현하는게 핵심이다.







