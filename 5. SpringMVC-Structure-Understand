1. 스프링 MVC 전체 구조
  1-1
    -> 기존에 만들던 (4번)과 스프링 MVC구조와 크게 다를게 없다. FrontController를 DispatcherServlet이라는 이름으로만 바꾸면 거의 같다.
    -> DispatcherServlet이것도 결국 서블릿이다. -->> FrameworkServlet -->> HttpServletBean -->> HttpServlet 으로 상속 (결국 서블릿으로 작동한다.)
    -> DispatcherServlet는 urlpattern="/" 형식으로 모든 경로에 대하여 매핑한다. 
    -> 스프링 부트에서는 내장톰캣을 띄우면서 Was에 있는 서블릿컨테이너에서 서블릿을 형성하는데 DispatcherServlet를 자동으로 띄운다.
  1-2
    -> 요청 흐름
      ->> 서블릿이 호출되면 HttpServlet이 제공하는 service() 호출된다.
      ->> 스프링 MVC는 DispatcherServlet의 부모인 FrameworkServlet에서 service()를 오버라이드 해주었다.
      ->> FrameworkServlet.service()를 시작으로 여러 메서드가 호출되면서, DispatcherServlet.doDispatch()가 호출된다.
  1-3
    -> doDispatch 알고리즘
      ->> 1. 핸들러 조회
      ->> 2. 핸들러 어댑터 조회 - 핸들러를 처리할 수 있는 어댑터
      ->> 3. 핸들러 어댑터 실행 ->> 4. 핸들러 어댑터를 통해 핸들러 실행 ->> 5. ModelAndView 변환
      ->> 6. processDispatchResult 가 실행 (여기에서 Render 가 실행되는것 임)
      ->> 7. 뷰리졸버를 통해 뷰 찾기. (View 반환)
      ->> 8. view와 request, response 를 렌더링.
  1-4
    -> "동작순서"
      ->> 1. 핸들러 조회 : 핸들러 매핑을 통해 URL에 매핑된 핸들러(컨트롤러)를 조회한다.
      ->> 2. 핸들러 어댑터 조회 : 핸들러를 실행할 수 있는 핸들러 어댑터를 조회한다.
      ->> 3. 핸들러 어댑터 실행 : 핸들러 어댑터를 실행한다.
      ->> 4. 핸들러 실행 : 핸들러 어댑터가 실제 핸들러를 실행한다.
      ->> 5. ModelAndView 반환 : 핸들러 어댑터는 핸들러가 반환하는 정보를 ModelAndView로 변환 해서 반환한다.
      ->> 6. viewResolver 호출 : 뷰리졸버를 찾고 실행한다.
        --- JSP의 경우 : InternalResourceViewResolver가 자동 등록되고 사용된다.
      ->> 7. View 반환 : 뷰리졸버는 뷰의 논리 이름을 물리 이름으로 바꾸고, 렌더링 역할을 담당하는 뷰 객체를 반환한다.
        --- JSP의 경우 : InternalResourceView(JstView)를 반환하는데, 내부에 forward() 로직이 있다.
      ->> 8.뷰 렌더링 : 뷰를 통해서 뷰를 렌더링 한다.

2. 핸들러 매핑과 핸들러 어댑터
  2-1
    -> 스프링에서는 예전에 @Controller 를 사용하기전에 interface로 Controller를 사용했었다.
    -> 핸들러 매핑(HandleMapping)
      ->> 핸들러 매핑에서 이 컨트롤러를 찾을 수 있어야 한다.
      ->> 예) 스프링 빈의 이름으로 핸들러를 찾을 수 있는 핸들러 매핑이 필요하다. (springmvc/old-controller)
    -> 핸들러 어댑터(HandleAdapter)
      ->> 핸들러 매핑을 통해서 찾은 핸들러를 실행할 수 있는 핸들러 어댑터가 필요하다.
      ->> 예) Controller 인터페이스를 실행 할 수 있는 핸들러 어댑터를 찾고 실행해야 한다. 

  2-2
    -> 스프링부트가 자동 등록하는 핸들러 매핑과 핸들러 어댑터
      -->> HandlerMapping
        -> RequestMappingHandlerMapping : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용하여 헨들러를 찾는다.
        -> BeanNameUrlHandlerMapping : URL요청이 오면 스프링 빈의 이름과 맞는 헨들러를 찾는다.
      -->> HandlerAdapter
        -> RequestMappingHandlerAdapter : 애노테이션 기반의 컨트롤러인 @ReqeustMapping에서 사용
        -> HttpRequestHandlerAdapter : HttpRequestHandler 처리
        -> SimpleControllerHandlerAdapter : Controller 인터페이스 (애노테이션X, 과거에 사용) 처리

    -> 1. 핸들러 매핑으로 헨들러 조회
      ->> 1. HandlerMapping을 순서대로 실행하여, 헨들러를 찾는다.
      ->> 2. 이 경우 빈 이름으로 헨들러를 찾아야 하기 떄문에 이름 그대로 빈 이름으로 헨들러를 찾아주는 BeanNameUrlHandlerMapping가 실행 성공되어 헨들러인 OldController를 반환
    -> 2. 헨들러 어댑터 조회
      ->> 1. HandlerAdapter의 supports()를 순서대로 호출한다.
      ->> 2. simpleControllerHandlerAdapter가 Controller 인터페이스를 지원하므로 대상이 된다.
    -> 3. 헨들러 어댑터 실행
      ->> 1. 디스패처 서블릿이 조회한 SimpleControllerHandlerAdapter를 실행하면서 헨들러 정보도 함께 넘겨준다.
      ->> 2. SimpleContreollerHandlerAdapter는 헨들러인 OldController를 내부에서 실행하고, 그 결과를 반환한다.

    -> summary
      -> OldController를 사용하면서 호출되는 헨들러 메핑, 어댑터는 다음과 같다.
        -->> 1. HandlerMapping = BeanNameUrlHandlerMapping
        -->> 2. HandlerAdapter = SimpleControllerHandlerAdapter
      -> 매핑방식을 일단 찾고 -->> 어떤 어댑터를 사용할지  찾아서 적용시킨다.

    -> 지금 Spring에서 가장 많이 사용하는 것은 RequestMappingHandlerMapping, RequestMappingHandlerAdapter 이다.
        즉 @RequestMapping 애노테이션을 가장 많이 사용한다.

3. 뷰 리졸버
  3-1
    -> 호출된 헨들러(컨트롤러)에서 return 타입에 맞춰서 논리적 타입을 보내어 뷰리졸버에서 물리적 url로 변경한다.
    -> application.properties 에서 spring.mvc.view.prefix=/WEB-INF/views/ (물리적 url 앞주소)
    ->                             spring.mvc.view.suffix=.jsp (물리적 url 뒷주소) 를 넣어주면 뷰 리졸버에서 물리적 URL로 변경해줄수 있다.
    -> 스프링부트에서는 InternalResoirceViewResolver라는 뷰 리졸버를 자동으로 등록하는데 이떄 위에 application.properties에서 위에 있는 설정정보를 사용해서 등록한다. 

  3-2
    -> 스프링부트가 자동 등록하는 뷰리졸버
    -> BeanNameViewResilver : 빈 이름으로 (논리이름 "new-form")뷰를 찾아서 반환한다. (엑셀파일 생성 기능에 사용)
    -> InternalResourceViewResolver : JSP를 처리할 수 있는 뷰를 반환한다. 

4. 스프링 MVC - 시작하기
  4-1
    -> 스프링이 제공하는 기능은 기본적으로 애노테이션 기반으로 사용된다.
    -> @RequestMapping을 사용하는 컨트롤러!! @RequestMapping ->> RequestMappingHandlerMapping , RequestMappingHandlerAdapter 가장 우선순위가 높다.
    -> @Controller를 class에 붙이고, 메소드에는 @RequestMapping 가 있으면 이 기능이 호출되어 사용된다. 
    -> @Controller은 스프링이 자동으로 스프링 빈으로 등록한다. (@Component를 구현되어있어서), 스프링 MVC에서 애노테이션 기반 컨트롤러로 인식한다.
    -> @RequestMapping은 요청정보를 매핑하고, 해당 URL이 호출되면 메서드가 호출되며, 애노테이션 기반이라 메서드의 이름은 임의로 지으면 되고, 모델과 뷰 정보를 담아서 ModelAndView를 반환하면 된다.
  4-2
    -> RequestMappingHandlerMapping은 스프링 빈 중에서 @RequestMapping 또는 @Controller가 class 레벨에 붙어 있는 경우에 매핑 정보로 인식한다.

5. 스프링 MVC - 컨트롤러 통합
  5-1
    -> @RequestMapping 은 메소드 단위라서 하나의 컨트롤러 아래에 통합 할 수 있어 가독성을 높일수 있다.
    -> class 레벨에서 @RequestMapping("공통된 url주소")를 하면 URL 주소들이 합쳐지면서 각 개별의 맞는 메소드 URL이 호출된다. 

6. 스프링 MVC - 실용적인 방식
  6-1 실무에서 가장 많이 사용하는 스타일임.
    -> class에 @Controller을 붙이기
    -> class에 @RequestMapping("공통 URL 붙이기")
    -> 각 메소드 단위에 @RequestMapping 논리 URL 붙이기
    -> 각 메소드 단위에 반환타입을 String 으로 하고 return "논리 URL" 로 return 하기.
    -> 각 메소드 단위에 파라미터를 (@RequestParam("username") String username or Model model) 형식으로 파라미터를 받는다.
    -> model에는 model.addAttribute("member", member); return "save-result" 로 한다.

  6-2
    -> @RequestMapping 에는 get이나 post든 어떤 요청으로 와도 상관이 없는데 좋은 개발은 아니다. 구분하는것이 좋은데
    -> @RequestMapping(value= "save" , method=RequestMethod.GET) 이런식으로 GET, POST를 구분지어서 받을수 있도록 한게 좋다.
    -> or @GetMapping("save") / @PostMapping("save") 형식으로 해도 된다.
