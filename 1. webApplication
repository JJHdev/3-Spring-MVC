1. 웹 서버, 웹 애플리케이션 서버
  - 웹에서는 HTTP 메시지에 모든 것을 전송 (HTML, TEXT/ IMAGE , 음성, 영상, 파일/ JSON,XML (API) / 거의 모든 형태의 데이터 전송 가능 / 서버간에 데이터를 주고 받을 때도 대부분 HTTP 사용)
  - WebServer (엔진x, 아파치)
    -. HTTP 기반 동작
    -. 정적 리소스 제공 정적파일(HTML, CSS, JS, 이미지, 영상)
    -. 클라이언트가 Http메시지로 웹서버에 요청 하면 웹서버에서 HTML등 원하는 자료를 HTTP응답 해준다.
  - WAS (웹 애플리케이션 서버, 톰캣)
    -. HTTP 기반 동작
    -. 웹 서버 기능 포함
    -. 프로그램 코드를 실행해서 애플리케이션 로직 수행 
    -. 동적HTML, HTTP API(JSON)
    -. 서블릿, JSP, 스프링MVC
  - 요즘은 웹서버와 와스의 경계가 너무 애매모호 해졌다. 그냥 간단하게,   
    -. 웹서버는 정적리소스 , 와스는 애플리케이션 로직
    -. WAS는 애플리케이션 코드를 실행하는데 더 특화
  - 웹시스템은 최소 구성 단위는 - WAS, DB 이다.
  - (소규모 프로젝트) 클라이언트 -> WAS (로직, 정적 리소스) -> DB 
  - (규모가 있는 플젝) 클라이언트 -> WebServer(정적 리소스) -> WAS (애플리케이션 로직) -> DB

2. 서블릿
  2-1
  - 서버 TCP/IP 연결 대기, 소켓 연결
  - HTTP 요청 메시지를 파싱해서 읽기
  - POST 방식, /save URL 인지
  - HTTP 메시지 바디 내용 파싱
    - username, age 데이터를 사용할수 있게 파싱
  - 저장프로세스 실행
  ---------------------------------------------------------------
  - 비즈니스 로직 실행
    - 데이터베이스에 저장 요청
  ---------------------------------------------------------------
  - HTTP 응답 메시지 생성 시작
    - HTTP 시작라인 생성
    - Header 생성
    - 메시지 바디에 HTML 생성에서 입력
  - TCP/IP에 응답 전달, 소켓 종

  ----> 서블릿은 상단에 비즈니스 로직 실행을 제외 한 로직을 전부 지원 한다.
  ----> 서블릿은 HTTP 요청 메시지, HTTP 응답 메시지 를 편리하게 사용하도록 도와줌 (request, response)

  2-2
  --> 웹브라우저 -> localhost:8080/heool 요청  -> WAS 에서 request, response 생성 및 서블릿 객체 생성하여 서블릿 컨테이너에서 로직 수행 -> 로직수행 결과와 response 객체 정보로 HTTP 응답 생성하여 웹브라우저에 전달.
    --> HTTP요청시 WAS는 Reqeust, Response 객체를 새로 만들어서 서블릿 객체 호출 하여 사용 후 WAS는 Respones객체에 담겨있는 내용으로 HTTP 응답 정보를 생성

  2-3
  -> 서블릿 컨테이너란?
    --> WAS 안에 서블릿 컨테이너가 있다.
    --> 톰캣처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 한다.
    --> 서블릿 객체, Request, Response의 생성, 호출, 관리를 한다.
    --> HTTP요청이 오면 HTTP 메시지를 기반으로 요청이 올때 마다 Reqeust, Reponse는 새롭게 생겨나는데, 서블릿 객체(url객체 받는곳, 애플리케이션 로직 수행하는곳)은 싱글톤으로 관리된다.
    --> 멀티 쓰레드 처리 지원

3. 동시요청 - 멀티쓰레드
  중요중요
  웹브라우저가 WAS에 (TCP/IP)를 통하여 연결한다. WAS에서 휴식 쓰레드가 할당 되어 쓰레드는 servlet를 호출하여 수행한다. 그런 후 servlet는 WAS에 응답하여 WAS는 웹브라우저에 응답한다. 그런 후 쓰레드는 휴식을 취한다.

  3-1 쓰레드란?
    -> 애플리케이션 코드를 하나하나 순차적으로 실행하는 것은 쓰레드
    -> 쓰레드는 한번에 하나의 코드라인만 수행하여, 동시 처리가 필요하면 쓰레드를 추가로 생성
    -> 쓰레드 풀이란 (일정 톰캣은 최대 200개 기본 설정) 쓰레드를 미리 만들어 놓고 요청이 오면 쓰레드를 할당해주고 반납 받는곳.
    -> WAS의 주요 튜닝 포인트는 최대 쓰레드(max thread) 수이다.
    -> 멀티쓰레드는 다중요청에 대한 쓰레드를 여러개 할당해주는 것을 말한다.
    -> WAS에서 멀티쓰레드에 대한 부분을 처리해줘서 개발자는 싱글쓰레드 프로그래밍을 하듯이 편리하게 소스코드를 개발하면된다.
    -> 멀티 쓰레드 환경이므로 싱글톤 객체(서블릿, 스프링 빈)은 주의해서 사용해야한다.
    -> core에 수만큼 쓰레드를 컨텍스트 스위칭한다. (2개의 쓰레드가 있을 경우 계속 스위칭해가며 동시에 실행하는것처럼 보이게 실행한다.)

4. HTML, HTTP API, CSR, SSR
  4.1
    -> 정적리소스, 동적HTML, HTTP API(주로 Json형식의 데이터만 서로 주고 받는 방법)을 주로 백엔드개발자는 개발시 고려해야 한다.
    -> SSR(서버 사이드 렌더링) 서버에서 최종 HTML을 생성하여 클라이언트에 전달.
    -> CSR(클라이언트 사이드 렌더링) HTML 결과를 자바스크립트를 사용하여 웹브라우저에서 동적으로 생성하여 적용.
  4.2
    -> JSP, 타임리프등 서버사이드렌더링 기술을 익혀놓자.

5. 자바 백엔드 웹 기술 역사
  5.1
    -> 서블릿 - 1997 (TCP/IP) 연결하고 쓰레드 관리하기 위해 생성
    -> JSP - 1999 HTML 생성은 편리하지만, 비즈니스 로직까지 너무 많은 역할 담당.
    -> 서블릿, JSP 조합 MVC 패턴 사용 (모델, 뷰, 컨트롤러 나누어 개발)
