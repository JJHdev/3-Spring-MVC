
.1. 프로젝트 생성
  1-1
    -. 프로젝트 선택
        Project: Gradle Project
        Language: Java
        Spring Boot: 2.4.x
        Project Metadata
        Group: hello
        Artifact: springmvc
        Name: springmvc
        Package name: hello.springmvc
        Packaging: Jar (주의!)
        Java: 11
        Dependencies: Spring Web, Thymeleaf, Lombok
    -. Jar를 사용하면 항상 내장 서버(톰캣등)를 사용하고, webapp 경로도 사용하지 않습니다. 내장 서버 사용에 최적화 되어 있는 기능입니다. 최근에는 주로 이 방식을 사용합니다. 
        War를 사용하면 내장 서버도 사용가능하고 JSP 위주로 사용하지만, 주로 외부 서버에 배포하는 목적으로 사용합니다.

  1-2 
    -. 스프링 부트에 Jar 를 사용하면 /resources/static/ 위치에 index.html 파일을 두면 Welcome 페이지로 처리해준다. (스프링 부트가 지원하는 정적 컨텐츠 위치에 /index.html 이 있으면 된다.

2. 로깅 간단히 알아보기
  2-1
    -. 운영 시스템에서는 System.out.println() 같은 시스템 콘솔을 사용해서 필요한 정보를 출력하지 않고, 별도의 로깅 라이브러리를 사용해서 로그를 출력한다.
    -. 로그 라이브러리는 Logback, Log4J, Log4J2 등등 수 많은 라이브러리가 있는데, 그것을 통합해서 인터페이스로 제공하는 것이 바로 SLF4J 라이브러리다.
        쉽게 이야기해서 SLF4J는 인터페이스이고, 그 구현체로 Logback 같은 로그 라이브러리를 선택하면 된다. 실무에서는 스프링 부트가 기본으로 제공하는 Logback을 대부분 사용한다.

    -. private Logger log = LoggerFactory.getLogger(getClass());
    -. private static final Logger log = LoggerFactory.getLogger(Xxx.class)

  2-2
    -. @RestController
        @Controller 는 반환 값이 String 이면 뷰 이름으로 인식된다. 그래서 뷰를 찾고 뷰가 랜더링 된다.
        @RestController 는 반환 값으로 뷰를 찾는 것이 아니라, HTTP 메시지 바디에 바로 입력한다. 따라서 실행 결과로 ok 메세지를 받을 수 있다. @ResponseBody 와 관련이 있는데, 뒤에서 더 자세히 설명한다.
    
    application.properties
    -. #전체 로그 레벨 설정(기본 info)
          logging.level.root=info
    -. #hello.springmvc 패키지와 그 하위 로그 레벨 설정  >> [hello.springmvc] 패키지 이름 
          logging.level.hello.springmvc=debug
    -. 만약에 application.properties에서 설정을 하지 않는다면, info 레벨로 설정되어 있다.

  2-3
    -. log.trace > log.debug > log.info > log.warn > log.error 순으로 심각한 단계일 경우에만 console 에 찍힌다. 그리하여 운영서버에서 중요한 내용만 log만 남길려면 info > warn > error 로 해서 배포한다. 수많은 사람들의 정보를 너무 많이 찍히면 중구난방이라 심각한 내용만 찍히도록 한 것임
    -. 보통 개발서버에는 debug 운영서버에는 info 출력을 주로 사용한다.
    -. @Slf4j를 class단위에 넣으면 private Logger log = LoggerFactory.getLogger(getClass());를 직접 쓰지 않아도 log 라는 변수로 사용 가능하다.
    -. ★★★★ log.trace("trace " , name) / log.trace("trace " + name) 둘의 차이점은 +는 호출이 안되어도 자바 스스로 계산을 다 해놔서 사용안해도 되는 메모리를 사용한다. , 로 구분해서 넣으면 호출 되었을 때 메모리를 사용하여 계산 하여 될수 있으면 쉼표로 구분하여 사용해야한다.
    -. 그리고 System.out 보다 (내부버퍼링, 멀티쓰레드 등등) 훠얼씬 수십배 차이가 나서 실무에서는 꼭 log를 사용하도록 해야한다.

3. 요청매핑
  3-1
    -. @RequestMapping("URL 주소") >> 로 요청URL 매핑하기. (get, post등 모든 요청에 대하여 받는다.) / GetMapping, PostMapping
    -. @GetMapping("/mapping/{userId}") 이렇게 경로에 경로변수를 넣을수 있고,
        public String mappingPAth(@PathVariavle("userId") String data) 와 같이 경로에 경로변수를 넣는것들도 쓸수가 있다.
    -. {userId}경로 변수는 다중으로 설정이 가능하다.
    -. @GetMappiug(value="/mapping-param" , params = "mode=debug") 는 파라미터 mode라는 키로 dubug라는 value가 있어야만 호출 되도록 한다.
    -. headers 에서는 HTTP 메시지 헤더에 mode키로 debug라는 값이 있어야 호출된다.
    -. @PostMapping(value="/mapping-consumne" , consumes = "application/json") // context-Type으로도 구분해서 받을수 있다. (application/json)

4. 요청매핑 - API 예시
  4-1 회원관리 API
    -. 회원 목록조회 : GET /users
    -. 회원 등록 : POST /users
    -. 회원 조회 : GET /users/{userid}
    -. 회원 수정 : PATCH /users/{userid}
    -. 회원 삭제 : DELETE /users/{userid}

  4-2
    -. text 형식으로 보내면 html 형식으로 , api형식으로 보내면 json 형식으로 리턴

5. HTTP 요청 - 기본, 헤더 조회
  5-1 애노테이션 기반의 스프링 컨트롤러(ReqeustMappingAdapterMapping)는 다양한 파라미터를 지원하는데 HTTP 헤더를 조회하는 방법이다.
    -. 위의 기반으로 받을수 있는 파라미터는 아래와 같다.
      ->> HttpServletReqeust request, 
          HttpServletResponse response , 
          HttpMethod httpMethod, Locale locale, 
          @RequestHeader MulyiValueMap<String, String> headerMap, 
          @ReqeustHeader("host") String host
          @CookieValue(value = "myCookie", required = false) String cookie
    -. 위와 같은 파라미터를 입력하여 각 정보를 받을수 있다. (그외에도 들어오는것들이 많다. ex) Model model )
  5-2. 파라미터 목록 및 응답 목록은 공식메뉴얼에도 있으며 다양하게 있다.

6. HTTP 요청 파라미터 - 쿼리 파라미터, HTML Form
  6-1
    -. Get방식의 쿼리파라미터, Post-HTML_form 방식, Http message body 3가지 방식이 있다. 

  6-2 요청파라미터 (Get 쿼리파라미터 ?user=jang / Post Html form )
    -. HttpServletRequest request > request.getParameter() 를 사용하여 두가지 파라미터를 받을수 있다. (Http 메시지 바디에 담겨와서)  ---->>> 이것을 요청파라미터라고 한다.
    -. 스프링부트안에 jar프로젝트 에서는 resources > static 에 파일들은 외부에 공개되는 파일들이다. (html 파일) // war파일은 wepApp에 있다. 

7. HTTP 요청 파라미터 - @ReqeustParam
  7-1
    -. 스프링이 제공하는 @RequestParam을 사용하면 요청파라미터를 매우 편리하게 사용할 수 있다. 
    -. 스프링에서 리턴타입 String이면서 Stirng을 반환할 경우 논리적 url 주소를 보내는것으로 인식한다. 그래서 http 바디에 그냥 메세지를 보낼려면, @RestController를 class 단위로 붙이고
       혹은 메소드단위에 @ResponseBody를 붙여서 사용한다.  이렇게 하면 Http 응답메세지에 글자 그대로 보낸다. 
  7-2
    -. @ReqeustParam(required=false or true) 기능도 있다. (필수값 여부) 기본 값은 true다. false에서 int는 안된다. null을 받을수 없어서. (기본 primitive에 null 넣으면 안된다.!)
    -. @ReqeustParam(defaultValue="content") 기능도 있다. >> null일경우 및 빈문자("")에도 default값이 들어간다. 
  7-3 파라미터를 Map으로 받을수 있다.
    -. @RequestParam Map<Stirng, Object> paramMap 으로 해서 Map형식으로 받을수도 있다. >> paramMap.get("username") 과 같이 값을 꺼낼수 있다.
    -. 파라미터 값이 1개가 확실하다면(키값이) Map을 쓰는게 맞지만 그렇지 않다면 MultiValueMap으로 받아서 사용하자

8. HTTP 요청 파라미터 - @ModelAttribute
  8-1  개발을 하면 요청파라미터를 받아서 필요한 객체를 만들고 그 객체에 값을 넣어주어야 한다. 근데 이것을 한번에 해결 가능하게 해주는 기능이 있는데 이것이 @ModelAttribute 다.
    -. @Data 롬복을 사용하면 게터, 세터등 다양한 기능들을 사용하게 해준다. 
    -. @ModelAttribute(HelloData helloData)와 같이 사용하면 게터와 세터를 이용해서 값을 객체에 자동적으로 넣어준다. 
      ->> 요청파라미터의 이름으로 HelloData 객체의 프로퍼티를 찾는다. 그리고 해당 프로퍼티의 setter를 호출해서 파라미터의 값을 입력(바인딩) 한다.
      ->> 프로퍼티란??? 객체에 getUsername() / setUsername()이 있으면 이 객체에는 username이라는 프로퍼티를 가지고 있다. 이 프로퍼티의 값을 변경할려면 setUsername()이 호출되고
          이 프로퍼티를 조회하면 getUsername()이 호출된다. 
    -. @ModelAttribute에서 int에 문자를 넣을 경우 바인딩오류가 발생한다. 
    
  8-2 @ModelAttribute를 생략 가능하다. 
    -. 그냥 뺴고 객체(도메인)을 넣어서 사용해도 자동적으로 프로퍼티 바인딩이 된다.

  8-3 Spring에서는 바인딩시 다음과 같은 규칙을 가지고 있다.
    -. String, int, Integer 같은 단순타입은 @ReqeustParam 을 이용하여 바인딩 한다.
    -. 나머지에는 @ModelAttribute를 이용하여 바인딩한다. (argument resolver로 지정해둔 타입 제외 >> ex)HttpServletResponse 와같이 미리 정해둔 타입들 )

9. HTTP 요청 메시지 - 단순 텍스트
  9-1 HTTP message body에 데이터를 담아서 요청 >> 주로 HTTP API 에서 주료 사용한다. (JSON, XML, TEXT) /// 여기에서는 Http message body에 단순 텍스트를 담아서 보낸것을 읽어보겠다.
    -. 요청 파림터와 다르게 Http 메시지 바디를 통해 데이터가 직접 데이터가 넘어오는 경우는 @ReqeustParam, @ModelAttribute로 받을수 없다.
    -. Http 메시지 바디의 데이터를 InputStream에 담아서 직접 읽을수 있다. 
      -->> ServletInputStream inputStream = request.getInputStream();
      -->> String messageBody = StreamUtiles.copyToString(inputStream, StanderdCharsets.UTF-8);       >> Stream은 항상 Byte코드로 넘어온다 그리하여 항상 어떤타입으로 인코딩 할지 정해줘야 한다.

  9-2 (HttpServletRequest request, HttpServletResponse response)을 사용하여 받는게 아니라 다른 파라미터로 받을수 있다.
    -. (InputStream inputStream, Writer responseWriter)  >> String messageBody = StreamUtiles.copyToString(inputStream, StanderdCharsets.UTF-8);
        방식으로 사용도 가능하다.

  9-3 (HttpEntity<String> httpEntity) 으로 사용가능하다.
    -. String messagedBody = httpEntity.getBody(); 와 같이 사용 가능하다. 

  9-4 HttpEntity를 스프링에서 제공하는데 이는 Http 헤더와 바디의 정보를 직접 조회 하는것이다.
    -. 이는 요청파라미터를 조회하는 기능과 관계 없다. 
    -. 그리고 리턴타입에서도 사용 가능한데 httpEntity는 메시지 바디에 정보와 헤더에 정보를 직접 반환할수 있다. (view 조회 기능은 안된다.)

  9-5 @ResponseBody 
      (@ReqeustBody String messageBody) 형식으로 HttpmessageBody 내용으로 body를 직접 조회하는 기능도 있다. 

10. HTTP 요청 메세지 - JSON
  10-1 {"username":"hello" , "age":20} / content-type : application/json
    -. private ObjectMapper objectMapper = new ObjectMapper();
      -->> ServletInputStream inputStream = request.getInputStream();
      -->> String messageBody = StreamUtiles.copyToString(inputStream, StanderdCharsets.UTF-8);
      -->> HelloData helloData = objectMapper.readValue(messageBody, HelloData.class);
      --> 로하여 객체로 JSon데이터를 받을수 있다. 

  10-2
    -. @RequestBody 를사용하여 messageBody를 대체해여 넣어서 사용한다. 

  10-3
    -. (@RequestBody HelloData helloData) 를 사용하여 Json데이터를 객체에 바로 바인딩이 가능하다.  >> HttpMessage 컨버터가 작동하여 HelloData helloData = objectMapper.readValue(messageBody, HelloData.class); 이 기능도 수행해주는 것
    -. HttpMessage 컨버터는 문자뿐만이 아니라, JSON도 객체로 바인딩 해준다.
    -. Http 요청시에 content-type이 application/json인지 꼭 확인해야한다. 그래야 JSON을 처리할 수 있는 HTTP 메시지 컨버터가 실행된다.
    -. (HttpEntity<HelloData> httpEntity)
      -->> HelloData data = httpEntity.getBody(); 로 하여 Json데이터를 읽을수도 있다. 

    -. @RequestBody 요청 (content-tpye : application/json)
      -->> JSON요청 ->Http메시지 컨버터 -> 객체
    -. @ResponseBody 응답  (Accept: application/json)
      -->> 객체 -> Http메시지 컨버터 -> JSON응답

  10-4
    -. class에는 @ResponseBody 하고 (@RequestBody HelloData helloData) 를 하고 return을 helloData를 하면 이 객체가 Json으로 변환되어 httpMessageBody에 반환된다.

11. HTTP 응답 - 정적 리소스, 뷰템플릿
  11-1
    -. 정적 리소스 : 웹 브라우저에 정적인 HTML, css, js을 제공 할때에 정적리소스를 사용한다.
    -. 뷰템플릿 : 서버사이드렌더링 으로 웹브라우저에 동적인 HTML을 제공할때에 사용한다.
    -. HTTP 메시지 사용 : HTTP API를 제공하는 경우에는 HTML이 아니라 데이터를 전달해야 하므로, HTTP 메시지 바디에 JSON 같은 형식으로 데이터를 실어 보낸다. 

  11-2 SpringBoot 에는 다음과 같은 디렉토리에 정적인 리소스를 발송한다.
    -. /static , /public , /resources , / META-INF/resources

    -. src/main/resources는 리소스를 보관하는 곳이고 , 또 클래스패스의 시작 경로이다. 따라서 다음 디렉토리에 리소스를 넣어두면 스프링부트가 정적 리소스로 서비스를 제공한다. 
      --->>> src/main/resources/[static, public] 여기서 부터 경로 시작한다. 

  11-3 SpringBoot에는 다음과 같은 디렉토리에 뷰템플릿을 만든다. (뷰템플릿을 거쳐서 HTML이 생성되고, 뷰가 응답을 만들어서 전달한다.)
    -. 뷰템플릿 경로 (src/main/resources/templates 경로로 시작한다.)

  11-4 String을 반환하는 경우 - View or Http 메세지
    -. @ResponseBody가 없으면 "response/hello"로 뷰 리졸버가 실행되어서 뷰를 찾고, 렌더링 한다.
    -. @ResponseBody, HttpEntity가 있으면 뷰리졸버를 실행하지 않고, HTTP메시지 바디에 직접 response/hello라는 문자가 입력된다.

  11-5 스프링부트가 자동으로 ThymeleafViewResolver 와 필요한 스프링 빈들을 등록한다. 그리고 다음 설정도 사용한다. 이 설정은 기본 값 이기 때문에 변경이 필요할 때만 설정변경하면된다.
    -. applicaion.properties 에서
      ->> spring.thymeleaf.prefix=classpath:/templates/
      ->> spring.thymeleaf.suffix=.html
    

12. HTTP 응답 - HTTP API, 메시지 바디에 직접 입력
  12-1
    -. HTTP API를 제공하는 경우에는 HTML이 아니라 데이터를 전달해야 하므로, HTTP 메시지 바디에 JSON 같은 형식으로 데이터를 실어 보낸다.
    -. @GetMapping("/response-body-string-v1")
       public void responseBodyV1(HttpServletResponse response) throws IOException {
         response.getWriter().write("ok");
       }
       /**
       * HttpEntity, ResponseEntity(Http Status 추가)
       * @return
       */
       @GetMapping("/response-body-string-v2")
         public ResponseEntity<String> responseBodyV2() {
         return new ResponseEntity<>("ok", HttpStatus.OK);
       }
       @ResponseBody
       @GetMapping("/response-body-string-v3")
         public String responseBodyV3() {
         return "ok";
       }
       @GetMapping("/response-body-json-v1")
       public ResponseEntity<HelloData> responseBodyJsonV1() {
         HelloData helloData = new HelloData();
         helloData.setUsername("userA");
         helloData.setAge(20);
         return new ResponseEntity<>(helloData, HttpStatus.OK);
       }
       @ResponseStatus(HttpStatus.OK)
       @ResponseBody
       @GetMapping("/response-body-json-v2")
       public HelloData responseBodyJsonV2() {
         HelloData helloData = new HelloData();
         helloData.setUsername("userA");
         helloData.setAge(20);
         return helloData;
       }

----------------------------------
    responseBodyV1
    서블릿을 직접 다룰 때 처럼
    HttpServletResponse 객체를 통해서 HTTP 메시지 바디에 직접 ok 응답 메시지를 전달한다.
    response.getWriter().write("ok")

    responseBodyV2
    ResponseEntity 엔티티는 HttpEntity 를 상속 받았는데, HttpEntity는 HTTP 메시지의 헤더, 바디 정보를 가
    지고 있다. ResponseEntity 는 여기에 더해서 HTTP 응답 코드를 설정할 수 있다.
    HttpStatus.CREATED 로 변경하면 201 응답이 나가는 것을 확인할 수 있다.

    responseBodyV3
    @ResponseBody 를 사용하면 view를 사용하지 않고, HTTP 메시지 컨버터를 통해서 HTTP 메시지를 직접 입력할
    수 있다. ResponseEntity 도 동일한 방식으로 동작한다.

    responseBodyJsonV1
    ResponseEntity 를 반환한다. HTTP 메시지 컨버터를 통해서 JSON 형식으로 변환되어서 반환된다.

    responseBodyJsonV2
    ResponseEntity 는 HTTP 응답 코드를 설정할 수 있는데, @ResponseBody 를 사용하면 이런 것을 설정하기 까
    다롭다.
    @ResponseStatus(HttpStatus.OK) 애노테이션을 사용하면 응답 코드도 설정할 수 있다.
    물론 애노테이션이기 때문에 응답 코드를 동적으로 변경할 수는 없다. 프로그램 조건에 따라서 동적으로 변경하려면
    ResponseEntity 를 사용하면 된다

--------------------------------------
  @ResponseBody를 class단위로 붙여서 사용할수 있다. 근데 @Controller 과 @ResponseBody를 합친것이 @RestController 이다. 

13. HTTP 메시지 컨버터

14. 요청 매핑 헨들러 어탭터 구현
