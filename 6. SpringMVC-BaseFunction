1. 프로젝트 생성
  1-1
    -. 프로젝트 선택
        Project: Gradle Project
        Language: Java
        Spring Boot: 2.4.x
        Project Metadata
        Group: hello
        Artifact: springmvc
        Name: springmvc
        Package name: hello.springmvc
        Packaging: Jar (주의!)
        Java: 11
        Dependencies: Spring Web, Thymeleaf, Lombok
    -. Jar를 사용하면 항상 내장 서버(톰캣등)를 사용하고, webapp 경로도 사용하지 않습니다. 내장 서버 사용에 최적화 되어 있는 기능입니다. 최근에는 주로 이 방식을 사용합니다. 
        War를 사용하면 내장 서버도 사용가능하고 JSP 위주로 사용하지만, 주로 외부 서버에 배포하는 목적으로 사용합니다.

  1-2 
    -. 스프링 부트에 Jar 를 사용하면 /resources/static/ 위치에 index.html 파일을 두면 Welcome 페이지로 처리해준다. (스프링 부트가 지원하는 정적 컨텐츠 위치에 /index.html 이 있으면 된다.

2. 로깅 간단히 알아보기
  2-1
    -. 운영 시스템에서는 System.out.println() 같은 시스템 콘솔을 사용해서 필요한 정보를 출력하지 않고, 별도의 로깅 라이브러리를 사용해서 로그를 출력한다.
    -. 로그 라이브러리는 Logback, Log4J, Log4J2 등등 수 많은 라이브러리가 있는데, 그것을 통합해서 인터페이스로 제공하는 것이 바로 SLF4J 라이브러리다.
        쉽게 이야기해서 SLF4J는 인터페이스이고, 그 구현체로 Logback 같은 로그 라이브러리를 선택하면 된다. 실무에서는 스프링 부트가 기본으로 제공하는 Logback을 대부분 사용한다.

    -. private Logger log = LoggerFactory.getLogger(getClass());
    -. private static final Logger log = LoggerFactory.getLogger(Xxx.class)

  2-2
    -. @RestController
        @Controller 는 반환 값이 String 이면 뷰 이름으로 인식된다. 그래서 뷰를 찾고 뷰가 랜더링 된다.
        @RestController 는 반환 값으로 뷰를 찾는 것이 아니라, HTTP 메시지 바디에 바로 입력한다. 따라서 실행 결과로 ok 메세지를 받을 수 있다. @ResponseBody 와 관련이 있는데, 뒤에서 더 자세히 설명한다.
    application.properties
    -. #전체 로그 레벨 설정(기본 info)
          logging.level.root=info
    -. #hello.springmvc 패키지와 그 하위 로그 레벨 설정
          logging.level.hello.springmvc=debug

3. 요청매핑

4. 요청매핑 - API 예시

5. HTTP 요청 - 기본, 헤더 조회

6. HTTP 요청 파라미터 - 쿼리 파라미터, HTML Form

7. HTTP 요청 파라미터 - @ReqeustParam

8. HTTP 요청 파라미터 - @ModelAttribute

9. HTTP 요청 메시지 - 단순 텍스트

10. HTTP 요청 메세지 - JSON

11. HTTP 응답 - 정적 리소스, 뷰템플릿

12. HTTP 응답 - HTTP API, 메시지 바디에 직접 입력

13. HTTP 메시지 컨버터

14. 요청 매핑 헨들러 어탭터 구
