1. 프로젝트 생성
  1-1
    -. java, gradle, SpringBoot 최신버전, jar, java 11, [Web, Thyme, Lombok] >> 프로젝트 만들기. [build.gradle >> 선택 , 롬복설정]
    -. WelcomePage ->> resource/static/index.html 만들어서 웰컴페이지 만들기. 

2. 요구사항 분석
  2-1
    -. 상품 도메인 모델 [ID, 상품명, 가격, 수량]
    -. 상품관리 기능 [상품목록, 상품 상세 ,상품 등록, 상품 수정]

3. 상품 도메인 개발
  3-1
    -. @Data를 핵심 도메인에 쓰기에는 예상치 못한 동작이 발생할수 있어서 사용하지 않는게 좋다. @Getter, @Setter로 사용하는게 좋다. 
    -. 여러 쓰레드기 접근하여 HashMap을 사용하면 값이 꼬일수 있어 위험하다. 그리하여 ConcurrentHashMap<>();을 사용하는게 좋다. --->>> 나중에 왜인지 찾아보자.
    -. Item Dto 만들 경우 ID를 안쓰게 된다면 ID없는 Dto를 하나더 만드는게 맞다.

4. 상품 서비스 HTML
  4-1
    -. 부트스트랩을 넣어놨는데 잘 안보일 경우에는 out파일을 삭제했다가 다시 빌드 해보자.!

5. 상품 목록 - 타임리프
  5-1
    -. html로 온것을 타임리프 문법으로 바꾼다.
    -. 서버사이드에서 렌더링 되고 , 기존 것을 대체한다. 
    -. 타임리프는 순수 HTML을 파일을 웹브라우저에서 열어도 내용을 확인할 수 있고, 서버를 통해 뷰 템플릿을 거치면 동적으로 변경된 결과를 확인할 수 있다. JSP를 생각하면 웹브라우저에 그냥 열면 정상적으로 표출되지 않는다/ 오직 서버를 통해서 JSP를 열어야 한다.
    -. resources/static/에 있는 html 파일들은 웹브라우저에서 경로를 입력하면 바로 들어갈수 있어서 위험하다. 그치만 templates는 서버를 통해서 간단경로로 갈수 있다. >>> html/item.html (static 하위에서 웹브라우저 접근) ///>>> basic/item (templates 하위에서 서버접근)

6. 상품 상세 , 상품 등록 폼
  6-1
    -. 상세 관련 pathValue이용하여 상세페이지 각아이템에따라 변경하였음.

7. 상품 등록 처리 - @ModelAttribute
  7-1
    -. POST-HTML Form
      -> content-type : application/x-www-form-urlencoded
      -> 메시지 바디에 쿼리 파라미터 형식으로 전달 : itemName=itemA&price=10000
    형식으로 데이터 전달.

  7-2
    -. input에서 name속성으로 key값으로 할당되어 전달된다.
    -. @ReqeustParam을 이용하여 파라미터 사용가능
    -. @ModelAttribute를 이용하여 파라미터 사용가능
      -> @ModelAttribute("hello") Item item 형식으로 이용
      -> ("hello") 이것을 넣으면 model.addAttribute("hello",item) 을 생략해도 된다. ("hello")이것은 Model의 이름이 된다.
      -> 만약에 ("hello") 이것을 지우면 Class명의 Item 첫글자를 소문자로 바꾸고, item으로 model.Attribute로 담겨서 사용된다.

    -. Item item 이렇게 객체만 사용해도, @ModelAttribute가 생략되어 자동적으로 사용된것 처럼 작동한다.

8. 상품 수정
  8-1
    -. 상품수정시 itemId는 pathValialbe로 하여 작업하였음.
    -. 상품 상세와 수정을 Get, Post로 하여 같은 URL 주소로 작업 하였음.
    -. Post로 들어오고 상세페이지로 이동할때에는 Redirect로 Get 주소로 이동하였음.

9. PRG - Post/ Redirect/ Get
  9-1
    -. 

10. RedrectAttribute
