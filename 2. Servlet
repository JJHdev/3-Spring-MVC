1. 프로젝트 생성
  1-1
    -> Gradle, War -> 톰캣을 별도로 사용할 때 주로 (Jar -> JSP를 사용하기 힘들어 War 사용) , D (Spring Web, Lombok)
    -> Lombok 설정, PostMan 설치
    
2. Hello 서블릿
  2-1
    -> @ServletComponentScan -> 실행되는 패키지부터 하위까지 전부 Servlet설정을 스캔 해준다. // 서블릿 자동등록
    -> @WebServlet(name="helloServlet", urlPatterns = "/hello")
    -> HTTP 요청이 오면 WAS가 ServletContainer에 Request, Response을 전달한다.
    -> Request는 쿼리파라미터로 온것을 받을수 있음, Response는 다시 웹브라우저에 HTTP메시지 전달 
    -> request.getParameter() 로 요청을 받을수 있다.
    -> response.setContentType("text/plain") , response.setCharacterEncoding("utf-8") // 여기까지 HTTP 헤더 응답 전달
    -> response.getWriter().writer ("") // 여기는 HTTP Body 응답 전달. 

    -> 톰캣서버를 실행시 WAS(서블릿 컨테이너를 가지고 있음) ->> 서블릿 컨테이너가 서블릿을 생성해준다. ->> 웹브라우저에서 HTTP 요청이 오면 WAS에서 HTTP 요청을 기반으로 Request, response객체를 만들어서 서블릿에 전달한다.
    -> 서블릿에서 요청으로 필요한 작업을 하고, 서블릿에서 Response에 정보를 셋팅하여 Was 에 전달한다. ->> Was에서는 Response를 웹브라우저에 전달.

3. HttpServletRequest 개요
  3-1
    -> HttpServletRequest를 사용하면 HTTP 요청메시지를 편리하게 조회 할수 있도록 해준다.
    -> HTTP 요청메시지 는 1. Start LINE  2. 헤더, 3. 바디로 구분된다.
      1. Start Line : HTTP 메소드, URL, 쿼리스트링, 스키마, 프로토콜  (정보가 있다.)
      2. 헤더 : 헤더 조회 (정보가 있다.)
      3. 바디 : form 파라미터 형식 조회, message body 데이터 직접 조회 (정보가 있다.)
    
    -> 임시 저장소 기능 (해당 HTTP 요청이 시작부터 끝날때까지/[고객이 요청을 보내고 응답 받을때까지 Life Cycle] 유지되는 임시 저장소 기능)
      -> request.setAttribute(name, value)
      -> request.getAttribute(name)

    -> 세션 관리기능
      -> request.getSession(create:true)
      
4. HttpServletRequest 기본 사용법
  4-1
    -> request.get~ 으로 HTTP 요청메시지 내용을 확인 할수 있다. (StartLine, 헤더, 바디 내용 조회 가능)
    -> content-Type : 어떤 스타일의 데이터인지 설명 (application/x-www-form-urlencoded >> form 데이터)

5. HTTP 요청 데이터 - 개요
  5-1
    -> Get - 쿼리파라미터
      -> /url?username=xxxx?age=20

    -> Post - HTML form
      -> http 메시지 바디에 쿼리파라미터 형식으로 전달 username=xxxx&age=20

    -> Http message-body 
      -> Http APi(rest Pai)에서 주료 사용 Json, Xml, Text
      -> POST, PUT, PATCH

6. HTTP 요청 데이터 - GET 쿼리 파라미터
  6-1 전달데이터 / username=xx , age=20
    -> /url?파라미터명=값&파라미터명=값 과 같이 ?로 시작하고 &로 파라미터 구분한다.
    -> request.getParameter() 는 파라미터이름이 하나일 경우 , 복수 일 경우에는 request.getParameterValues() 를 사용한다.
    -> get에서는 쿼리파라미터 형식으로 서버로 데이터를 전달 할때에는 HTTP 메시지 바디를 사용하지 않기 때문에 context-type가 없다.

7. HTTP 요청 데이터 - POST HTML Form
  7-1
    -> content-Type  (application/x-www-form-urlencoded) 의 특징을 가지고 있다.
    -> 쿼리파라미터 조회 방법은 6번과 같이 하면 된다.

8. HTTP 요청 데이터 - API 메시지 바디 - 단순 텍스트
  8-1
    -> Http message body에 데이터를 직접 담아서 요청
    -> request.getInputStream(); >> Byte 코드로 변환해서 데이터를 받아줌
    -> streamUtils.cofyToString(바이트코드, utf-8 설정); 으로 디코딩해줘야 한다. (바이트 코드는 전부 번역타입을 지정해줘야 한다.)

9. HTTP 요청 데이터 - API 메시지 바디 - JSON
  9-1
    -> content-type : application/json
    -> messagebody : {"username":"hello","age":20}
  9-2
    -> json 객체는 데이터를 다룰때 getter, setter로 거의 접근한다 (자바프로퍼티 접근법, 자바 빈 접근법)
    -> json을 파싱해서 자바 객체로 변환할려면 Jasckson, Gson같은 변환 라이브러리를 사용해야한다.

10. HTTPServletResponse - 기본 사용법
  10.1
    -> HTTP 응답 메시지 생성 (HTTP응답코드 지정, 헤더생성, 바디생성)
    -> 편의 기능 제공 (context-Type, 쿠키, Redirect)

  10.2
    -> response.setStatus(HttpServletResponse.SC_OK);
    -> response.setHeader("Content-type" , text/plain;charset=utf-8")
    -> response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate") // 과거 캐시 지우고
    -> response.setHeader("Pragma" , "no-cache") // 과거 캐시 지우고
    -> response.setHeader("my-header" , "hello")

    -> 쿠키와 관련된 메서드도 있다.
    -> Cookie cookie = new Cookie("myCookie" , "good");
    -> cookie.setMaxAge(600) // 600초
    -> response.addCookie(cookie);

    -> redirect 관련된 메서드도 있다.
    -> response.setStatus(HttpServletResponse.SC_FOUND)

11. HTTP 응답 데이터 - 단순 텍스트, HTML

12. HTTP 응답 데이터 - API JSON

















