-----------------------------------스스로 공부한 내용 중요하다 생각들고 찾은것-----------------
1. 서블릿 컨테이너와 스프링 컨테이너는 뭐가 다를까?? (https://sigridjin.medium.com/servletcontainer%EC%99%80-springcontainer%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EA%B0%80-626d27a80fe5 내용정리 잘되어있음)
  -. 스스로 정리한 공책에 내용을을 계속 읽어보면서 내용 이해하기. 


---------------------------------- 웹 어플리케이션의 이해 ---------------------------------- 
1. JSP를 실행하기 위해서는 War파일 사용해야한다.

2. InteliJ 무료버전에서는 preferences > Build, Execution, Deployment > Build Tools > Gradle
  Build and run using: Gradle IntelliJ IDEA
  Run tests using: Gradle IntelliJ IDEA
    -> 이렇게 할경우 war파일 경우 톰캣이 정상 시작되지 않는 문제가 발생하였다. Jar파일의 경우에는 문제 없었는데. 그리하여, Gradle로 설정하면 해결된다.
    -> 유료버전의 경우 제대로 war든 jar든 제대로 내장톰캣 수행됨.

3. 웹서버 -> 정적리소스, HTML, CSS, JS, 이미지, 영상
   WAS    -> 웹서버 기능 + 프로그램 코드를실행해서 애플리케이션 로직 수행 (동적HTML, HTTP API, 서블릿, JSP, 스프링 MVC)

4. 웹서버와 WAS 의 경계가 모호해지는데 자바는 서블릿 컨테이너 기능을 제공하면 WAS

5. 브라우저 > WAS[웹서버] > DB  -->> 소규모
   브라우저 > 웹서버 > WAS > DB -->> 대규모

6. 서버에서 처리하는 과정
  • 서버 TCP/IP 연결 대기, 소켓 연결
  • HTTP 요청 메시지를 파싱해서 읽기
  • POST 방식, /save URL 인지
  • Content-Type 확인
  • HTTP 메시지 바디 내용 피싱
    • username, age 데이터를 사용할 수 있게 파싱
  • 저장 프로세스 실행

  • 비즈니스 로직 실행
    • 데이터베이스에 저장 요청

  • HTTP 응답 메시지 생성 시작
    • HTTP 시작 라인 생성
    • Header 생성
    • 메시지 바디에 HTML 생성에서 입력
  • TCP/IP에 응답 전달, 소켓 종료

    -->> servlet가 비즈니스 로직실행 데이터베이스에 저장 요청 부분 제외하고 전부 수행해줘 쉽게 사용 가능해졌다.

7. 서블릿 사용방법
  -
  @WebServlet(name = "helloServlet", urlPatterns = "/hello") 
  public class HelloServlet extends HttpServlet { 
     @Override 
     protected void service(HttpServletRequest request, HttpServletResponse response){ 
       //애플리케이션 로직
     } 
  }
• urlPatterns(/hello)의 URL이 호출되면 서블릿 코드가 실행
• HTTP 요청 정보를 편리하게 사용할 수 있는 HttpServletRequest
• HTTP 응답 정보를 편리하게 제공할 수 있는 HttpServletResponse
• 개발자는 HTTP 스펙을 매우 편리하게 사용

8. localhost:8080/hello url 주소로 오면 HTTP요청메시지를 기반으로 WAS에서 Request, Response를 생성한다.
  -> 서블릿 컨테이너에 request, response를 제공하여 서블릿을 생성하여 비즈니스로직을 수행한다.
  -> 서블릿에서 수행한 비즈니스로직을 response에 담아서 WAS에 보낸다. Was에서 해석하여 웹브라우저에 전달한다.

9.   톰캣처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 함.
  -. 서블릿컨테이너는 서블릿 객체를 생성, 초기화, 호출, 종료하는 생명주기를 관리 하며, 싱글톤으로 관리한다.
  -. 동시 요청을 위한 멀티 쓰레드를 지원하며, JSP도 서블릿으로 변환되어서 사용된다.

10. 쓰레드는 자바에서 한라인씩 해석하며 코드를 실행한다.
  -. 단일요청에 대하여 WAS에 Connection(연결) 되면 Was에서 휴식중인 쓰레드를 호출하여 할당해준다
  -. 호출된 쓰레드는 서블릿을 호출하여 실행한다.
  -. 서블릿에서 응답하여 Connection을 이용하여 웹브라우저에 보낸다. 

  -. 그리고 요청마다 쓰레드를 생성하여 수행하고 종료시는 방식도 있는데 쓰레드를 생성하는 자체의 비용이 커서 단점이 크다.
  -. 쓰레드풀은 기존에 200개 정도 보유하고 있다면, 대여형식으로 쓰레드를 이용가능하게 해주고 반납받으며, 일정 요청 대기수 이상이면
     대기 상태를 거절하는 설정등 가능하다. 
  -. WAS에서는 주요 튜닝 포인트는 최대 쓰레드 수이다.

11. HTTP API는 웹클라이언트 to 서버 와 HTTP API - 서버 to 서버 둘다 가능하다.
  -. HTTP API는 주로 JSON 형태로 데이터 통신을 한다.
  -. 
12. SSR (서버사이드 렌더링 --> JSP, 타임리프와 같이 최종 결과를 서버에서 만들어서 웹브라우저에 전달)
    CSR (클라이언트 사이드 렌더링 --> 동적인 화면에 사용, 웹 환경을 마치 앱처럼 필요한 부분을 변경 가능함. React, Vue.js)

13. CSR에서는 웹브라우저에서 HTML 요청 >> 서버에서 자바스크립트 링크를 전달 >> 웹브라우저에서 자바스크립트 요청 >> 서버에서 자바스크립트 로직, 렌더링코드 전달 >> 웹브라우저에서 HTTP API 데이터 요청 >> 서버에서 응답 코드 전달.

14. 
    • 과거에는 서버에 WAS를 직접 설치하고, 소스는 War 파일을 만들어서 설치한 WAS에 배포
    • 스프링 부트는 빌드 결과(Jar)에 WAS 서버 포함 -> 빌드 배포 단순화

----------------------------------        Servlet      ----------------------------------
1. 서블릿은 톰캣 같은 웹 애플리케이션 서버를 직접 설치하고,그 위에 서블릿 코드를 클래스 파일로 빌드해서 올린 다음, 톰캣 서버를 실행하면 된다. 

2. @ServletComponentScan  스프링 부트는 서블릿을 직접 등록해서 사용할 수 있도록 @ServletComponentScan 을 지원한다.  서블릿을 등록하고 사용한다는것은 서블릿컨테이너의 관리를 받겠다.(인터페이스 상속)
  -. 원래는 web.xml에 설정하거나 할수있지만 스프링부트에서는 어노테이션을 통해 설정이 가능하다는 뜻.
  -. @WebServlet(name = "helloServlet", urlPatterns = "/hello")
     @Override
     protected void service(HttpServletRequest request, HttpServletResponse response){}

3. HTTP 메시지를 통하여 서버에 데이터 전달하는 방법은 (Get-쿼리파라미터, POST-HTML Form , Http message body가 있다.)

4. content-type은 HTTP 메시지 바디의 데이터 형식을 지정한다.
  -. Get URL 쿼리파라미터 형식은 HTTP메시지바디를 사용하지 않기 떄문에 content-type가 없다.
  -. Post 방식은 Http 메시지바디에 해당데이터를 담아 보내기 떄문에 바디에 어떤 데이터가 어떤형식인지 content-type를 꼭 지정해야 한다.

5. JSON 결과를 파싱해서 사용할 수 있는 자바 객체로 변환하려면 Jackson, Gson 같은 JSON 변환 라이브러리를 추가해서 사용해야 한다. 스프링 부트로 Spring MVC를 선택하면 기본으로 Jackson 라이브러리( ObjectMapper )를 함께 제공한다
  -. HTML form 데이터도 메시지 바디를 통해 전송되므로 직접 읽을 수 있다. 하지만 편리한 파리미터 조회 기능 ( request.getParameter(...) )을 이미 제공하기 때문에 파라미터 조회 기능을 사용하면 된다.

6. HttpServletResponse는 Content-Type, 쿠키, Redirect의 기능을 제공

7. request에서 json 받는법
  @WebServlet(name = "requestBodyJsonServlet", urlPatterns = "/request-body-json")
  public class RequestBodyJsonServlet extends HttpServlet {
  
      private ObjectMapper objectMapper = new ObjectMapper();
  
      @Override
      protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
          ServletInputStream inputStream = request.getInputStream();
          String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
  
          System.out.println("messageBody = " + messageBody);
  
          HelloData helloData = objectMapper.readValue(messageBody, HelloData.class);
  
          System.out.println("helloData.username = " + helloData.getUsername());
          System.out.println("helloData.age = " + helloData.getAge());
  
          response.getWriter().write("ok");
      }
  }

8. response 에서 json 보내는법 
    private ObjectMapper objectMapper = new ObjectMapper();

    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //Content-Type: application/json
        response.setHeader("content-type", "application/json");
        response.setCharacterEncoding("utf-8");
        HelloData data = new HelloData();
        data.setUsername("kim");
        data.setAge(20);
        //{"username":"kim","age":20}
        String result = objectMapper.writeValueAsString(data);
        response.getWriter().write(result);
    }

---------------------------------- servlet, JSP, MVC ---------------------------------- 
1. Servlet으로만 프로젝트 만들기
  -. @WebServlet(name="서블릿명" , urlPatterns="url 경로")
     public class class명 extends HttpServlet(){
        @Override
        protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOExceptiron{
            response.setContentType("text/html");
            response.setCharacterEncoding("utf-8");
    
            PrintWriter w = response.getWriter();
    
            w.write("<html>\n" +
                    "<head>\n" +
                    " <meta charset=\"UTF-8\">\n" +
                    "</head>\n" +
                    );
        }
     }
  형식으로 스프링에서 제공하는 Servlet어노태이션을 이용하여 HTML을 서버에서 생성하여 작성하기.

2. JSP로만 구성하기.
<%@ page import="hello.servlet.domain.member.MemberRepository" %>
<%@ page import="hello.servlet.domain.member.Member" %>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
   // request, response 사용 가능
   MemberRepository memberRepository = MemberRepository.getInstance();

   System.out.println("save.jsp");
   String username = request.getParameter("username");
   int age = Integer.parseInt(request.getParameter("age"));
   Member member = new Member(username, age);

   System.out.println("member = " + member);
   memberRepository.save(member);
%>
<html>
    <head>
        <meta charset="UTF-8">
    </head>
    <body>
        성공
        <ul>
            <li>id=<%=member.getId()%></li>
            <li>username=<%=member.getUsername()%></li>
            <li>age=<%=member.getAge()%></li>
        </ul>
        <a href="/index.html">메인</a>
    </body>
</html>

3. Model View Controller
MVC 패턴은 지금까지 학습한 것 처럼 하나의 서블릿이나, JSP로 처리하던 것을 컨트롤러(Controller)와 뷰(View)라
는 영역으로 서로 역할을 나눈 것을 말한다. 웹 애플리케이션은 보통 이 MVC 패턴을 사용한다.

  -. MVC 패턴 - 적용
    서블릿을 컨트롤러로 사용하고, JSP를 뷰로 사용해서 MVC 패턴을 적용해보자.
    Model은 HttpServletRequest 객체를 사용한다. request는 내부에 데이터 저장소를 가지고 있는데, 
    request.setAttribute() , request.getAttribute() 를 사용하면 데이터를 보관하고, 조회할 수 있다

  -.    RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/views/new-form.jsp");
        dispatcher.forward(request, response);

  %-- dispatcher.forward() : 다른 서블릿이나 JSP로 이동할 수 있는 기능이다. 서버 내부에서 다시 호출이 발생한다.
      /WEB-INF
      이 경로안에 JSP가 있으면 외부에서 직접 JSP를 호출할 수 없다. 우리가 기대하는 것은 항상 컨트롤러를 통해서
      JSP를 호출하는 것이다.
      redirect vs forward
      리다이렉트는 실제 클라이언트(웹 브라우저)에 응답이 나갔다가, 클라이언트가 redirect 경로로 다시 요청한다. 
      따라서 클라이언트가 인지할 수 있고, URL 경로도 실제로 변경된다. 반면에 포워드는 서버 내부에서 일어나는 호
      출이기 때문에 클라이언트가 전혀 인지하지 못한다.

  -. form이나 url의 상대경로를 사용할경우 현재 url에서 표시되는 것을 기준으로 생각하면 편하다.

  -.<%= request.getAttribute("member")%> 로 모델에 저장한 member 객체를 꺼낼 수 있지만, 너무 복잡해진다.
    JSP는 ${} 문법을 제공하는데, 이 문법을 사용하면 request의 attribute에 담긴 데이터를 편리하게 조회할 수 있다.


최종적을 정리로는
  1. servlet
     -. sevlet만을 이용해서 구현시 스프링에서 @WebServlet을 제공해줘 서블릿을 설정하고 url매핑을하여 서버단에서 html += '<body>'와
        같은 방식으로 서버에서 비즈니스로직 + view를 구현하여 진행한다. 

  2. JSP
    -. JSP페이지에서 서버와 html을 구현하여 실행하는 방식이 있는데 http://localhost:8080/jsp/members/new-form.jsp 와 같이
       a태그나 form태그를 통해서 JSP페이지를 이동한다.
    -. 상단에는 <% %>으로 비즈니스로직을 구현하며, 하단에는 JSP코드를 이용해 HTML와 흡사한 방식으로 view페이지를 구현한다.

  3. MVC패턴
    -. servlet를 이용하여 url및 서버단을 구성한다.
         RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/views/members.jsp");
         dispatcher.forward(request, response);
      와 같이 forward를 이용하여 view페이지를 이동한다. 

    -. 여기에서 dispatcher.forward()는 다른 서블릿이나 JSP로 이동할 수 있는 기능이다. 서버 내부에서 다시 호출이 발생한다.
    -. /WEB-INF는 이 경로안에 JSP가 있을 경우 외부에서 직접 JSP를 호출할 수 없다. 컨트롤러를 통해서만 JSP를 호출이 되어야 하는 것이다.


---------------------------------- MVC프레임워크 만들기  ---------------------------------- 
1. (V1) 프론트 컨트롤러 서블릿 하나로 클라이언트의 요청을 받아 핸들러 매핑을 함
  1.1 이렇게 하면 프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 된다.
  1.2 프론트 컨트롤러에서 모든 URL를 받고 Map을 하나 만들어 각 url를 키값으로 하여 value값을 컨트롤러 객체로 한다.
  1.3 그리하여 인터페이스 controllerv1에 process를 만들어 인터페이스에 구현된 객체에 맞춰 그냥 controller.process를 하여 핸들러를 실행한다.

2. (V2) 에서는 뷰모든 인터페이스를 상속한 컨트롤러에서 view이동시 
        String viewPath = "/WEB-INF/views/save-result.jsp";
        RequestDispatcher dispatcher = request.getRequestDispatcher(viewPath);
        를 이용하여 중복된 코드가 많다.

  2.1 인터페이스 Controller를 구현한 컨트롤러는 MyView를 반환하여 프론트 컨트롤러에서 렌더링 하여 JSP로 forward한다.
        public void render(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            RequestDispatcher dispatcher = request.getRequestDispatcher(viewPath);
            dispatcher.forward(request, response);
        }
        형식의 Myview Class를 만들어서 모든 컨트롤러가 사용한다.

  2.2  (V1)에서 인터페이스의 controller는 void process으로 선언되었지만 (V2)에서 인터페이스는 MyView process으로 하여 return을 Myview 객체로 리턴받는다.
    -. 구현체인 클래스 컨트롤러에서는 @Override
                                    public MyView process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                                        return new MyView("/WEB-INF/views/new-form.jsp");
                                    }
        으로 리턴객체를 보내어 forward는 신경쓰지 않게 만든다.
    -. 프론트 컨트롤러에서의 프로세스는 
      2.2.1 요청 URL 주소를 받는다.
      2.2.2 요청 URL 주소에 매핑된 컨트롤러를 찾아 어떤 컨트롤러를 받납할지 찾는다.
      2.2.3 controller에 process를 실행한다. (인터페이스로 구현되어있는것들) , Myview객체를 받는다. (process에서 이미 응답할 경로 받음)
      2.2.4 myView.render 를 통해 이미 저장되어있는 응답경로를 forward할수 있도록 한다.

  3. (V3) Request, Response 가 매일 중복되어 전달되니 불필요한 코드가 많다. 이를 Model를 추가해보자.
          View이름에서 논리이름만 받아 자동적으로 물리이름으로 변경되도록 하자.  (ViewResolver 구현)
    3.1 viewResolver는 view의 논리이름을 물리이름으로 변경하는 역할.
    3.2 프론트컨트롤러의 동작순서
      -. 서블릿인터페이스를 상속받아 모든 url호출시 호출되도록 설정
      -. 각 컨트롤러와 url주소를 매핑
      -. 요청된 url주소를 받아 매핑된것을 찾아 보내야할 컨트롤러 객체를 반환
      -. request요청을 반복문을 사용하여 Map으로 변환한뒤에 컨트롤러에 process로 map을 보내어 비즈니스로직 수행
      -. 비즈니스로직을 수행 후 ModelView (객체로 되어있어, 논리적인 주소, 응답받은 Map)를 리턴받기.
      -. ModelView객체를 viewResolver를 돌려 물리적 주소 얻어 render에 있는 필드에 등록하기.
      -. view를 Rendering하여 Map(model)과, request, response 를 보내기.
      -. render에서는 Map을 request.setAttribute 반복문 돌리고, 미리 등록했던 물리적 주소로 forward 하기.

  4. (V4) V3버전에서 크게 달라진다기 보다 좀더 편하게 사용이 가능하도록 변경하겠음.
    4.1   Map<String, String> paramMap = createParamMap(request);      // reqeust.getParameter해서 Map에 담은것들
          Map<String, Object> model = new HashMap<>();                 // process에서 model에 put을 해서 응답 보낼 객체를 담고, render에서 reqeust.setAttribute를 한다.
  
          String viewName = controller.process(paramMap, model);

  5. (V5) -> V3 방식(paramMap / return = ModelAndView) V4 방식 (paramMap, Model / return = String) 둘다 유동적으로 사용하는 방법
    5.1 HandlerAdapter라는 인터페이스를 만들어서 컨트롤러를 호출하는 부분과 어느컨트롤러에 맞는지 support를 선언한다.
    5.2 ControllerV3HandlerAdapter 를 만들어 HandlerAdapter를 상속받는다. (support는 controller3가 맞는지 체크) > hanlder 호출하는 부분은 각 알맞는 컨트롤러에 보낼 파라미터와 ModelView를 만들어 리턴한다.
    5.3 ControllerV4HandlerAdapter 를 만들어 HandlerAdapter를 상속받는다. (support는 controller4가 맞는지 체크) > hanlder 호출하는 부분은 각 알맞는 컨트롤러에 보낼 파라미터와 ModelView를 만들어 리턴한다.
    5.4 FrontController를 만들어 각 URL에 맞는 컨트롤러를 Map에 매핑한다. (생성자 역할)
    5.5 FrontController를 만들어 각 모든 ControllerHandlerAdaper를 List에 매핑한다. (생성자 역할)

    5.6 프론트컨트롤러는 모든 요청이 오면 실행되며 처음에 url요쳉에 맞는 핸들러를 찾는다.
        -> 5.4에 Map에 매핑되어있는걸로 찾는다.
    5.7 프론트컨트롤러는 핸들러를 찾았으면 어느 어뎁터(파라미터는 뭘로보낼지 리턴(view)를 ModelView 변환 방식)을 맞춰야 할지 Adpater를 찾는다.
        -> 5.5dp List에 매핑할걸로 찾는다.
    
    5.8 찾은 Adapter에서 process를 수행하여 각 어뎁터에 맞는 방식으로 컨트롤을 호출하고 return값을 modelView로 변환하여 받는다.

    5.9 리턴 받은 ModelView를 viewResolver로 논리경로 -> 물리경로 변환하여 MyView에 물리경로를 셋팅한다.
    5.10 MyView에서 렌더링을 수행한다. (ModelView에서 모델을 보내고, reqeust, response)를 보내 forward한다.

    v1: 프론트 컨트롤러를 도입
        기존 구조를 최대한 유지하면서 프론트 컨트롤러를 도입
    v2: View 분류
        단순 반복 되는 뷰 로직 분리
    v3: Model 추가
        서블릿 종속성 제거
        뷰 이름 중복 제거
    v4: 단순하고 실용적인 컨트롤러
        v3와 거의 비슷
        구현 입장에서 ModelView를 직접 생성해서 반환하지 않도록 편리한 인터페이스 제공
    v5: 유연한 컨트롤러
        어댑터 도입
        어댑터를 추가해서 프레임워크를 유연하고 확장성 있게 설계


---------------------------------- 스프링 MVC 구조 이해 ---------------------------------- 
1. DispatcherServlet도 Servlet을 상속받아서 사용한다. (FrameworkSerlvet 상속받아 사용하는데 이는 HttpServletBean 을 상속받고 이것은 HttpServlet을 상속받는다)
2. DispatcherServlet은 모든 경로에 / 로 되어있어 사용되지만 servlet을 만들면 더 자세한 경로가 우선순위로 되어있어 기존에 서블릿을 등록해도 사용할 수 있다.
      ** 동작 순서 **
    3.1 핸들러 조회: 핸들러 매핑을 통해 요청 URL에 매핑된 핸들러(컨트롤러)를 조회한다.
    3.2 핸들러 어댑터 조회: 핸들러를 실행할 수 있는 핸들러 어댑터를 조회한다.
    3.3 핸들러 어댑터 실행: 핸들러 어댑터를 실행한다.
    3.4 핸들러 실행: 핸들러 어댑터가 실제 핸들러를 실행한다.
    3.5. ModelAndView 반환: 핸들러 어댑터는 핸들러가 반환하는 정보를 ModelAndView로 변환해서 반환한다.
    3.6 viewResolver 호출: 뷰 리졸버를 찾고 실행한다.
        JSP의 경우: InternalResourceViewResolver 가 자동 등록되고, 사용된다.
    3.7 View 반환: 뷰 리졸버는 뷰의 논리 이름을 물리 이름으로 바꾸고, 렌더링 역할을 담당하는 뷰 객체를 반환한다.
        JSP의 경우 InternalResourceView(JstlView) 를 반환하는데, 내부에 forward() 로직이 있다.
    3.8 뷰 렌더링: 뷰를 통해서 뷰를 렌더링 한다.

HandlerMapping
```
0 = RequestMappingHandlerMapping : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용
1 = BeanNameUrlHandlerMapping : 스프링 빈의 이름으로 핸들러를 찾는다. 
```
위와 같이 Mapping으로 찾는게 기본인데 그럼에도 없으면 스프링 빈의 이름으로 헨들러를 찾는다.


HandlerAdapter
```
0 = RequestMappingHandlerAdapter : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용
1 = HttpRequestHandlerAdapter : HttpRequestHandler 처리
2 = SimpleControllerHandlerAdapter : Controller 인터페이스(애노테이션X, 과거에 사용) 처리



4. ViewResolver
  -. application.properties 에 다음 코드를 추가하자
    ```
    spring.mvc.view.prefix=/WEB-INF/views/
    spring.mvc.view.suffix=.jsp
    ```
  스프링 부트는 InternalResourceViewResolver 라는 뷰 리졸버를 자동으로 등록하는데, 이때 application.properties 에 등록한 spring.mvc.view.prefix , spring.mvc.view.suffix 설정 정보를 사용해서 등록한다.

% viewResolver 팁
  -참고
      InternalResourceViewResolver 는 만약 JSTL 라이브러리가 있으면 InternalResourceView 를 상
      속받은 JstlView 를 반환한다. JstlView 는 JSTL 태그 사용시 약간의 부가 기능이 추가된다.
  -참고
      다른 뷰는 실제 뷰를 렌더링하지만, JSP의 경우 forward() 통해서 해당 JSP로 이동(실행)해야 렌더링이 된다. 
      JSP를 제외한 나머지 뷰 템플릿들은 forward() 과정 없이 바로 렌더링 된다.
  -참고
      Thymeleaf 뷰 템플릿을 사용하면 ThymeleafViewResolver 를 등록해야 한다. 최근에는 라이브러리만 추
      가하면 스프링 부트가 이런 작업도 모두 자동화해준다.

5. 스프링 MVC 시작!!!!!!!!!!!!!!!!!****
  5.1 @RequestMapping

    @Controller
    public class SpringMemberFormControllerV1 {
        @RequestMapping("/springmvc/v1/members/new-form")
        public ModelAndView process(){
            return new ModelAndView("new-form");
        }
    }
      위에서 @Controller로 스프링 빈의 스캔대상이 된다. 
      RequestMappingHandlerMapping 은 스프링 빈 중에서 @Controller 가 클래스 레벨에 붙어 있는 경우에 매핑 정보로 인식한다

  5.2 SpringMVC (V1)
    -.  ModelAndView mv = new ModelAndView("save-result");
        mv.addObject("member", member);
        -->> ModelAndView를 통해서 Model에 데이터를 추가할때에는 addObject를 이용한다.

  5.3 SpringMVC (V2)
    -. @RequestMapping를 이용할 경우 메소드 단위로 실행하여 같은 공통의 기능을 사용시 한 class에 묶어서 사용이 가능하다.

  5.3 SpringMVC (V3)
    -. @RequestMapping(value = "/new-form", method = RequestMethod.GET)  -->> @GetMapping, @PostMapping
        -. @GetMapping("/new-form") , @PostMapping("/save") 형식으로 get Post 전문적으로 받을수 있다.
    
    -. @RequestParam 사용
        -. save(@RequestParam("username") String username, @RequestParam("age") int age, Model model) {
           model.addAttribute("member", member);} 하여 파라미터를 여러 방식으로 받을수 있다.

    -. return 타입은 String으로 하여 return "save-result"; 방식으로 View rendering 할수 있다.

---------------------------------- SpringMVC 기본기능 ---------------------------------- 
1. jar를 사용시 java, resource, webapp에서 주로 내장톰캣을 사용하여 wepapp을 사용하지 않는다.

2. 스프링 부트 로깅 라이브러리는 기본으로 다음 로깅 라이브러리를 사용한다.
    SLF4J - http://www.slf4j.org
    Logback - http://logback.qos.ch

---------------------------------- 웹 어플리케이션의 이해 ---------------------------------- 


---------------------------------- 웹 어플리케이션의 이해 ---------------------------------- 
