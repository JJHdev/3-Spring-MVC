---------------------------------- 웹 어플리케이션의 이해 ---------------------------------- 
1. JSP를 실행하기 위해서는 War파일 사용해야한다.

2. InteliJ 무료버전에서는 preferences > Build, Execution, Deployment > Build Tools > Gradle
  Build and run using: Gradle IntelliJ IDEA
  Run tests using: Gradle IntelliJ IDEA
    -> 이렇게 할경우 war파일 경우 톰캣이 정상 시작되지 않는 문제가 발생하였다. Jar파일의 경우에는 문제 없었는데. 그리하여, Gradle로 설정하면 해결된다.
    -> 유료버전의 경우 제대로 war든 jar든 제대로 내장톰캣 수행됨.

3. 웹서버 -> 정적리소스, HTML, CSS, JS, 이미지, 영상
   WAS    -> 웹서버 기능 + 프로그램 코드를실행해서 애플리케이션 로직 수행 (동적HTML, HTTP API, 서블릿, JSP, 스프링 MVC)

4. 웹서버와 WAS 의 경계가 모호해지는데 자바는 서블릿 컨테이너 기능을 제공하면 WAS

5. 브라우저 > WAS[웹서버] > DB  -->> 소규모
   브라우저 > 웹서버 > WAS > DB -->> 대규모

6. 서버에서 처리하는 과정
  • 서버 TCP/IP 연결 대기, 소켓 연결
  • HTTP 요청 메시지를 파싱해서 읽기
  • POST 방식, /save URL 인지
  • Content-Type 확인
  • HTTP 메시지 바디 내용 피싱
    • username, age 데이터를 사용할 수 있게 파싱
  • 저장 프로세스 실행

  • 비즈니스 로직 실행
    • 데이터베이스에 저장 요청

  • HTTP 응답 메시지 생성 시작
    • HTTP 시작 라인 생성
    • Header 생성
    • 메시지 바디에 HTML 생성에서 입력
  • TCP/IP에 응답 전달, 소켓 종료

    -->> servlet가 비즈니스 로직실행 데이터베이스에 저장 요청 부분 제외하고 전부 수행해줘 쉽게 사용 가능해졌다.

7. 서블릿 사용방법
  -
  @WebServlet(name = "helloServlet", urlPatterns = "/hello") 
  public class HelloServlet extends HttpServlet { 
     @Override 
     protected void service(HttpServletRequest request, HttpServletResponse response){ 
       //애플리케이션 로직
     } 
  }
• urlPatterns(/hello)의 URL이 호출되면 서블릿 코드가 실행
• HTTP 요청 정보를 편리하게 사용할 수 있는 HttpServletRequest
• HTTP 응답 정보를 편리하게 제공할 수 있는 HttpServletResponse
• 개발자는 HTTP 스펙을 매우 편리하게 사용

8. localhost:8080/hello url 주소로 오면 HTTP요청메시지를 기반으로 WAS에서 Request, Response를 생성한다.
  -> 서블릿 컨테이너에 request, response를 제공하여 서블릿을 생성하여 비즈니스로직을 수행한다.
  -> 서블릿에서 수행한 비즈니스로직을 response에 담아서 WAS에 보낸다. Was에서 해석하여 웹브라우저에 전달한다.

9.   톰캣처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 함.
  -. 서블릿컨테이너는 서블릿 객체를 생성, 초기화, 호출, 종료하는 생명주기를 관리 하며, 싱글톤으로 관리한다.
  -. 동시 요청을 위한 멀티 쓰레드를 지원하며, JSP도 서블릿으로 변환되어서 사용된다.

10. 쓰레드는 자바에서 한라인씩 해석하며 코드를 실행한다.
  -. 단일요청에 대하여 WAS에 Connection(연결) 되면 Was에서 휴식중인 쓰레드를 호출하여 할당해준다
  -. 호출된 쓰레드는 서블릿을 호출하여 실행한다.
  -. 서블릿에서 응답하여 Connection을 이용하여 웹브라우저에 보낸다. 

  -. 그리고 요청마다 쓰레드를 생성하여 수행하고 종료시는 방식도 있는데 쓰레드를 생성하는 자체의 비용이 커서 단점이 크다.
  -. 쓰레드풀은 기존에 200개 정도 보유하고 있다면, 대여형식으로 쓰레드를 이용가능하게 해주고 반납받으며, 일정 요청 대기수 이상이면
     대기 상태를 거절하는 설정등 가능하다. 
  -. WAS에서는 주요 튜닝 포인트는 최대 쓰레드 수이다.

11. HTTP API는 웹클라이언트 to 서버 와 HTTP API - 서버 to 서버 둘다 가능하다.
  -. HTTP API는 주로 JSON 형태로 데이터 통신을 한다.
  -. 
12. SSR (서버사이드 렌더링 --> JSP, 타임리프와 같이 최종 결과를 서버에서 만들어서 웹브라우저에 전달)
    CSR (클라이언트 사이드 렌더링 --> 동적인 화면에 사용, 웹 환경을 마치 앱처럼 필요한 부분을 변경 가능함. React, Vue.js)

13. CSR에서는 웹브라우저에서 HTML 요청 >> 서버에서 자바스크립트 링크를 전달 >> 웹브라우저에서 자바스크립트 요청 >> 서버에서 자바스크립트 로직, 렌더링코드 전달 >> 웹브라우저에서 HTTP API 데이터 요청 >> 서버에서 응답 코드 전달.

14. 
    • 과거에는 서버에 WAS를 직접 설치하고, 소스는 War 파일을 만들어서 설치한 WAS에 배포
    • 스프링 부트는 빌드 결과(Jar)에 WAS 서버 포함 -> 빌드 배포 단순화

---------------------------------- 웹 어플리케이션의 이해 ---------------------------------- 
---------------------------------- 웹 어플리케이션의 이해 ---------------------------------- 
---------------------------------- 웹 어플리케이션의 이해 ---------------------------------- 
---------------------------------- 웹 어플리케이션의 이해 ---------------------------------- 
